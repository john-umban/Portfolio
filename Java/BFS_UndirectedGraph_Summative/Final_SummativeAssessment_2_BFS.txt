package finalsummativeassessment_2;

import java.util.*;

public class FinalSummativeAssessment_2_BFS {

private int Vertices;
private LinkedList<Integer> adj_list[ ];

FinalSummativeAssessment_2_BFS(int v) {
Vertices = v;
adj_list = new LinkedList[v];
for (int i=0; i<v; ++i) 
adj_list[i] = new LinkedList();
}

void addEdge(int v,int w) {
adj_list[v].add(w);
}

void BFS(int root_node) {
boolean visited[] = new boolean[Vertices];

LinkedList<Integer> queue = new LinkedList<>();

visited[root_node]=true;
queue.add(root_node);

while (queue.size() != 0) {
root_node = queue.poll();
System.out.print(root_node+" ");

Iterator<Integer> i = adj_list[root_node].listIterator();
while (i.hasNext()){
int n = i.next();
if (!visited[n]) {
visited[n] = true;
queue.add(n);
}
}
}
}

void DFS_helper(int v,boolean visited[]) {
visited[v] = true;
System.out.print(v+" ");


Iterator<Integer> i = adj_list[v].listIterator();
while (i.hasNext())
{
int n = i.next();
if (!visited[n])
DFS_helper(n, visited);
}
}


void DFS(int v) {
boolean visited[] = new boolean[Vertices];
DFS_helper(v, visited);
}

public static void main(String[] args) {

FinalSummativeAssessment_2_BFS g = new FinalSummativeAssessment_2_BFS(10);
g.addEdge(0, 1);
g.addEdge(0, 3);
g.addEdge(1, 2);
g.addEdge(1, 3);
g.addEdge(1, 5);
g.addEdge(1, 6);
g.addEdge(2, 3);
g.addEdge(2, 4);
g.addEdge(2, 5);
g.addEdge(3, 4);
g.addEdge(4, 6);
    
System.out.println("Breadth-first traversal of graph with 0 as starting vertex:");
g.BFS(0);
System.out.println("\nDepth-first traversal of graph with 0 as starting vertex:");
g.DFS(0);
}
}